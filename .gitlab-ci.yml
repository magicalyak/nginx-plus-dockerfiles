image: docker:19.03.1

variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using the Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how the Kubernetes executor connects services
  # to the job container
  # DOCKER_HOST: tcp://localhost:2375
  #
  # For non-Kubernetes executors, we use tcp://docker:2375
  DOCKER_HOST: tcp://docker:2375
  #
  # This will instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""
  
services:
  - name:  docker:19.03.1-dind
    alias: docker
    entrypoint: ["/bin/sh","-c" ,'echo "10.1.1.5 registry.gitlab.f5demolab.com">>/etc/hosts && dockerd-entrypoint.sh']

before_script:
  - docker info
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY 

# Run sequentially
stages:
  - build
  - clean_up

alpine3.9: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

alpine3.9_tools: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

alpine3.10: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

centos7: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

centos7.6: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

centos8: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

debian9: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

debian10: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

ubuntu16.04: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

ubuntu18.04: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

ubuntu18.04_crossplane: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME-$CI_PIPELINE_ID # Unique container name
    TAG: $CI_JOB_NAME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - chmod +x ./ci-build.sh
    - ./ci-build.sh $NAME # Script to `docker run` with random ports
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:$TAG
    - docker stop $NAME
    - docker rm $NAME

clean_up:
  stage: clean_up
  script:
    - docker system prune -f
    - docker images
  when: always # Run regardless of job failures